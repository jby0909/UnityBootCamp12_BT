using UnityEngine;

namespace NPC_Example.Behaviours.BT
{
    /// <summary>
    /// <auto-generated/>  BehaviourTree.Builder 체이닝 메서드 모음
    /// 이 파일은 툴에 의해 덮어써집니다. 직접 편집 금지!
    /// </summary>
    public partial class Builder
    {
        public Builder Attack()
        {
            Node node = new Attack(_tree);
            Attach(_current, node);
            return this;
        }

        public Builder Condition(string propertyName)
        {
            Node node = new Condition(_tree, propertyName);
            Attach(_current, node);
            return this;
        }

        public Builder Monitor(float angle, float radius, float height, float maxDistance, LayerMask targetMask, LayerMask obstacleMask, float monitoringMinTime, float monitoringMaxTime)
        {
            Node node = new Monitor(_tree, angle, radius, height, maxDistance, targetMask, obstacleMask, monitoringMinTime, monitoringMaxTime);
            Attach(_current, node);
            return this;
        }

        public Builder Parallel(int successCountRequired)
        {
            Node node = new Parallel(_tree, successCountRequired);
            Attach(_current, node);
            return this;
        }

        public Builder Patrol(float angle, float radius, float height, float maxDistance, LayerMask targetMask, LayerMask obstacleMask, float patrolRadius, LayerMask groundMask)
        {
            Node node = new Patrol(_tree, angle, radius, height, maxDistance, targetMask, obstacleMask, patrolRadius, groundMask);
            Attach(_current, node);
            return this;
        }

        public Builder RandomSelector()
        {
            Node node = new RandomSelector(_tree);
            Attach(_current, node);
            return this;
        }

        public Builder Seek(float angle, float radius, float height, float maxDistance, LayerMask targetMask, LayerMask obstacleMask)
        {
            Node node = new Seek(_tree, angle, radius, height, maxDistance, targetMask, obstacleMask);
            Attach(_current, node);
            return this;
        }

        public Builder Selector()
        {
            Node node = new Selector(_tree);
            Attach(_current, node);
            return this;
        }

        public Builder Sequence()
        {
            Node node = new Sequence(_tree);
            Attach(_current, node);
            return this;
        }

        public Builder TargetDetection(float angle, float radius, float height, float maxDistance, LayerMask targetMask, LayerMask obstacleMask)
        {
            Node node = new TargetDetection(_tree, angle, radius, height, maxDistance, targetMask, obstacleMask);
            Attach(_current, node);
            return this;
        }

    }
}
