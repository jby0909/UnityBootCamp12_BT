using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace NPC_Example.Behaviours.BT.Editor // ★ Runtime 네임스페이스에 Editor 접미사만
{
    internal static class BuilderGenerator
    {
        private const string kOutputPath =
            "Assets/01.NPC_Example/Scripts/Runtime/Behaviours/BT/Builder_Generated.cs";

        [MenuItem("BehaviourTree/Generate C# builder code")]
        private static void Generate()
        {
            // 1. Node 파생 Concrete 타입 수집
            var nodeTypes = AppDomain.CurrentDomain.GetAssemblies()
                                    .Where(a => !a.IsDynamic)
                                    .SelectMany(a => a.GetTypes())
                                    .Where(t => t.IsClass &&
                                                !t.IsAbstract &&
                                                typeof(Node).IsAssignableFrom(t))
                                    .OrderBy(t => t.Name)
                                    .ToArray();

            // 2. 코드 빌드
            var sb = new StringBuilder();
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine();
            sb.AppendLine("namespace NPC_Example.Behaviours.BT");
            sb.AppendLine("{");
            sb.AppendLine("    /// <summary>");
            sb.AppendLine("    /// <auto-generated/>  BehaviourTree.Builder 체이닝 메서드 모음");
            sb.AppendLine("    /// 이 파일은 툴에 의해 덮어써집니다. 직접 편집 금지!");
            sb.AppendLine("    /// </summary>");
            sb.AppendLine("    public partial class Builder");
            sb.AppendLine("    {");

            foreach (var type in nodeTypes)
            {
                if (type.Name == nameof(Builder))
                    continue; // 방어 코드

                if (type.IsDefined(typeof(ExcludeFromBuilderAttribute), inherit: false))
                    continue;

                var ctor = SelectBestCtor(type);

                if (ctor == null)
                    continue;                // 적합한 생성자가 없으면 건너뜀

                var ps = ctor.GetParameters()
                             .Where(p => p.ParameterType != typeof(BehaviourTree))
                             .ToArray();

                // 2-1. 메서드 시그니처
                string paramList = string.Join(", ",
                    ps.Select(p => $"{GetFriendlyTypeName(p.ParameterType)} {p.Name}"));

                sb.AppendLine($"        public Builder {type.Name}({paramList})");
                sb.AppendLine("        {");

                // 2-2. 인스턴스 생성
                string argList = string.Join(", ", ps.Select(p => p.Name));
                if (!string.IsNullOrEmpty(argList))
                    argList = ", " + argList;

                sb.AppendLine($"            Node node = new {type.Name}(_tree{argList});");
                sb.AppendLine("            Attach(_current, node);");
                sb.AppendLine("            return this;");
                sb.AppendLine("        }");
                sb.AppendLine();
            }

            sb.AppendLine("    }");
            sb.AppendLine("}");

            // 3. 파일 저장 & 리프레시
            Directory.CreateDirectory(Path.GetDirectoryName(kOutputPath)!);
            File.WriteAllText(kOutputPath, sb.ToString(), Encoding.UTF8);
            AssetDatabase.Refresh();

            Debug.Log($"<b>BehaviourTree › Builder</b> 체이닝 메서드 재생성 완료\n→ {kOutputPath}");
        }

        /// <summary>BehaviourTree 파라미터를 첫 인자로 받는 가장 파라미터 많은 ctor</summary>
        private static ConstructorInfo? SelectBestCtor(Type t) =>
            t.GetConstructors(BindingFlags.Public | BindingFlags.Instance)
             .Where(c =>
                 c.GetParameters().Length > 0 &&
                 c.GetParameters()[0].ParameterType == typeof(BehaviourTree))
             .OrderByDescending(c => c.GetParameters().Length)
             .FirstOrDefault();

        /// <summary>System.Single → float 등 C# 키워드 변환</summary>
        private static string GetFriendlyTypeName(Type t)
        {
            return t switch
            {
                { } when t == typeof(int) => "int",
                { } when t == typeof(float) => "float",
                { } when t == typeof(string) => "string",
                { } when t == typeof(bool) => "bool",
                _ => t.Name
            };
        }
    }
}